"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[826],{361:function(e,t,n){var r=n(7294),o=n(3935),a=(n(4162),n(3794)),l=n(8377),i=n(442),c=n(2981),s=n(6447);function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e){var t=e.errors;return e.removeAlert,r.createElement(s.Z,{spacing:0,style:{position:"fixed",top:"70px",left:"50%",transform:"translateX(-50%)",zIndex:"9999"}},t.map((function(t,n){return r.createElement(m,{key:n,index:n,error:t.message,severity:t.severity,removeAlert:e.removeAlert})})))}function m(e){var t,n,o=e.error,a=e.severity,s=(e.removeAlert,t=(0,r.useState)(!0),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);l=!0);}catch(e){i=!0,o=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw o}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=s[0],m=s[1];return(0,r.useEffect)((function(){setTimeout((function(){m(!1)}),1e4)}),[m]),r.createElement(c.Z,{in:f},r.createElement(l.Z,{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",bgcolor:"error.main",color:"error.contrastText",sx:{m:1}},r.createElement(i.Z,{variant:"filled",severity:a,onClose:function(e){m(!1)},sx:{width:"500px"}},o)))}var d=n(3720),y=n(9226),g=n(4386),p=n(2658);function v(e){return r.createElement(y.Z,{sx:{flexGrow:0}},r.createElement(d.Z,{position:"fixed"},r.createElement(g.Z,null,r.createElement(p.Z,{variant:"h5",component:"div",sx:{flexGrow:1}},"Nerglish Translator"),r.createElement(y.Z,null,e.connectionStatus?r.createElement(r.Fragment,null):r.createElement(i.Z,{variant:"filled",severity:"error",sx:{m:1}},"Server Disconnected")),r.createElement(p.Z,null,"Welcome"))))}var h=n(6356);function b(e){return r.createElement("div",null,r.createElement(h.Z,{id:"filled-multiline-flexible",label:e.default_content,multiline:!0,rows:15,fullWidth:!0,value:e.value,onChange:e.readOnly?function(){}:function(t){return e.setText(t.target.value)},size:"large",InputProps:e.readOnly?{readOnly:!0}:{},defaultValue:""!==e.content?e.content:"",InputLabelProps:""!==e.content?{shrink:!0}:{}}))}var E=n(6914);function w(e){return r.createElement(r.Fragment,null,r.createElement(E.Z,{variant:"contained",onClick:e.emitQuery,sx:{"text-transform":"none",m:"10px"},size:"large"},"Translate!"),r.createElement(E.Z,{variant:"contained",color:"inherit",onClick:e.toggleLanguage,sx:{"text-transform":"none"},size:"large"},"Switch Language"))}function A(e){return r.createElement(r.Fragment,null,r.createElement("div",{style:{position:"fixed",bottom:0,right:0,margin:"10px"}},"Nerglish Translator v1.0 Â© 2022"))}function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);l=!0);}catch(e){i=!0,o=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw o}}return a}}(e,t)||x(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function k(e){var t=S((0,r.useState)(""),2),n=t[0],o=t[1],a=S((0,r.useState)(""),2),l=a[0],i=a[1],c=S((0,r.useState)(!0),2),s=c[0],u=c[1],m=S((0,r.useState)([]),2),d=m[0],y=m[1];function g(e,t){y((function(n){return[].concat(function(e){if(Array.isArray(e))return C(e)}(r=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||x(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{message:e,severity:t}]);var r}))}return(0,r.useEffect)((function(){if(e.socket){var t=function(t){console.log("get WS message, ",t),e.socket.emit("Response 200"),"Connected"===t.data&&(g("Connected to server","success"),console.log("Connected"))},n=function(e){var t=e.success,n=e.content;console.log("got Translation, ",e),t?i(n):g(n,"error")};return e.socket.on("response",t),e.socket.on("results",n),function(){e.socket.off("response",t),e.socket.off("results",n)}}console.log("No socket")}),[e.socket]),r.createElement(r.Fragment,null,r.createElement(v,{addAlert:g,connectionStatus:!!e.socket&&e.socket.connected}),r.createElement(f,{errors:d,removeAlert:function(e){console.log("removing alert index:",e),y((function(t){return t.filter((function(t,n){return n!==e}))}))}}),r.createElement("div",{className:"func-wrapper",style:{top:"60px",width:"95%",position:"absolute",minHeight:"100px",margin:"2.5%"}},r.createElement("div",{className:"input-left",style:{width:"48%",float:"left",margin:"1%"}},r.createElement(p.Z,{variant:"h5",sx:{mb:"10px"}},s?"English":"Nerglish"),r.createElement(b,{default_content:"Input",setText:o,content:n})),r.createElement("div",{className:"output-right",style:{width:"48%",float:"right",margin:"1%"}},r.createElement(p.Z,{variant:"h5",sx:{mb:"10px"}},s?"Nerglish":"English"),r.createElement(b,{default_content:"Results (read only)",content:l,readOnly:!0})),r.createElement(w,{emitQuery:function(){console.log("emitting query",n),e.socket.emit("query",{isEnglish:s,content:n})},toggleLanguage:function(){i(""),u(!s)}})),r.createElement(A,null))}var O=n.p+"static/media/bg.dd38d73e.jpeg";function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function T(){var e,t,n=(e=(0,r.useState)(null),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],l=!0,i=!1;try{for(n=n.call(e);!(l=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);l=!0);}catch(e){i=!0,o=e}finally{try{l||null==n.return||n.return()}finally{if(i)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],l=n[1];return(0,r.useEffect)((function(){window.process=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){I(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},window.process)}),[]),(0,r.useEffect)((function(){try{var e=(0,a.ZP)("http://".concat(window.location.hostname,":2333/translate"));return l(e),function(){return e.close()}}catch(e){console.log(e);try{return newSocket=(0,a.ZP)("https://".concat(window.location.hostname,":2333/translate")),l(newSocket),function(){return newSocket.close()}}catch(e){console.log(e)}}}),[l]),r.createElement(r.Fragment,null,r.createElement("div",{className:"main-container"},r.createElement(k,{socket:o})),r.createElement("div",{style:{width:"100%",overflow:"hidden",backgroundColor:"0xffffff"}},r.createElement("img",{style:{width:"100%",height:"100%",top:"20px",position:"fixed",zIndex:"-1",opacity:"0.15"},src:O})))}var P;n(3935),window.React2=n(7294),console.log(window.React1===window.React2),o.render(r.createElement(T,null),document.getElementById("root")),P&&P instanceof Function&&n.e(131).then(n.bind(n,2131)).then((function(e){var t=e.getCLS,n=e.getFID,r=e.getFCP,o=e.getLCP,a=e.getTTFB;t(P),n(P),r(P),o(P),a(P)}))},3757:function(e,t,n){n.r(t);var r=n(7537),o=n.n(r),a=n(3645),l=n.n(a)()(o());l.push([e.id,"body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),t.default=l},4162:function(e,t,n){var r=n(3379),o=n.n(r),a=n(7795),l=n.n(a),i=n(569),c=n.n(i),s=n(3565),u=n.n(s),f=n(9216),m=n.n(f),d=n(4589),y=n.n(d),g=n(3757),p={};p.styleTagTransform=y(),p.setAttributes=u(),p.insert=c().bind(null,"head"),p.domAPI=l(),p.insertStyleElement=m();var v=o()(g.default,p);if(!g.default.locals||e.hot.invalidate){var h=!g.default.locals,b=h?g:g.default.locals;e.hot.accept(3757,function(t){g=n(3757),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(b,h?g:g.default.locals,h)?(b=h?g:g.default.locals,v(g.default)):e.hot.invalidate()}.bind(this))}e.hot.dispose((function(){v()})),g.default&&g.default.locals&&g.default.locals}},function(e){e.O(0,[576],(function(){return 361,e(e.s=361)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,